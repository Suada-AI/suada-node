/* tslint:disable */
/* eslint-disable */
/**
 * Suada API
 * OpenAPI specification for the Suada API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CompletionMessagesInner } from './CompletionMessagesInner';
import {
    CompletionMessagesInnerFromJSON,
    CompletionMessagesInnerFromJSONTyped,
    CompletionMessagesInnerToJSON,
} from './CompletionMessagesInner';

/**
 * 
 * @export
 * @interface Completion
 */
export interface Completion {
    /**
     * ID of the model to use. This should be set to "suada-v1"
     * @type {string}
     * @memberof Completion
     */
    model: CompletionModelEnum;
    /**
     * A list of messages comprising the conversation so far.
     * @type {Array<CompletionMessagesInner>}
     * @memberof Completion
     */
    messages: Array<CompletionMessagesInner>;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
     * @type {number}
     * @memberof Completion
     */
    temperature?: number | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
     * @type {number}
     * @memberof Completion
     */
    topP?: number | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     * @type {number}
     * @memberof Completion
     */
    frequencyPenalty?: number | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     * @type {number}
     * @memberof Completion
     */
    presencePenalty?: number | null;
    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     * @type {Array<string>}
     * @memberof Completion
     */
    stop?: Array<string> | null;
    /**
     * The maximum number of tokens that can be generated in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length.
     * @type {number}
     * @memberof Completion
     */
    maxTokens?: number | null;
    /**
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
     * @type {number}
     * @memberof Completion
     */
    n?: number | null;
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available.
     * @type {boolean}
     * @memberof Completion
     */
    stream?: boolean | null;
}


/**
 * @export
 */
export const CompletionModelEnum = {
    SuadaV1: 'suada-v1'
} as const;
export type CompletionModelEnum = typeof CompletionModelEnum[keyof typeof CompletionModelEnum];


/**
 * Check if a given object implements the Completion interface.
 */
export function instanceOfCompletion(value: object): value is Completion {
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('messages' in value) || value['messages'] === undefined) return false;
    return true;
}

export function CompletionFromJSON(json: any): Completion {
    return CompletionFromJSONTyped(json, false);
}

export function CompletionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Completion {
    if (json == null) {
        return json;
    }
    return {
        
        'model': json['model'],
        'messages': ((json['messages'] as Array<any>).map(CompletionMessagesInnerFromJSON)),
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'topP': json['top_p'] == null ? undefined : json['top_p'],
        'frequencyPenalty': json['frequency_penalty'] == null ? undefined : json['frequency_penalty'],
        'presencePenalty': json['presence_penalty'] == null ? undefined : json['presence_penalty'],
        'stop': json['stop'] == null ? undefined : json['stop'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'n': json['n'] == null ? undefined : json['n'],
        'stream': json['stream'] == null ? undefined : json['stream'],
    };
}

export function CompletionToJSON(value?: Completion | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'model': value['model'],
        'messages': ((value['messages'] as Array<any>).map(CompletionMessagesInnerToJSON)),
        'temperature': value['temperature'],
        'top_p': value['topP'],
        'frequency_penalty': value['frequencyPenalty'],
        'presence_penalty': value['presencePenalty'],
        'stop': value['stop'],
        'max_tokens': value['maxTokens'],
        'n': value['n'],
        'stream': value['stream'],
    };
}

